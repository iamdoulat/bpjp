rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if a user is an admin by reading their Firestore profile
    function isAdmin() {
      // Note: Firestore rules must allow this get() operation.
      // The user must be authenticated.
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Campaign Images: Publicly readable, admin write.
    match /campaign_images/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Event Attachments: Publicly readable, admin write.
    match /event_attachments/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Notice Images: Publicly readable, admin write.
    match /notice_images/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Expense Attachments: Only readable by the admin who created them or any admin.
    // This is a stricter rule example. For simplicity, we can make it admin-only read/write.
    match /expense_attachments/{allPaths=**} {
      allow read, write: if isAdmin();
    }
    
    // Election Candidate Images: Publicly readable, admin write.
    match /election_candidates/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Profile Images: Users can read all profile images (for avatars).
    // Users can only write to their own profile image path.
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Organization settings images (president, secretary, cover)
    match /organization/{allPaths=**} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Advisory Board Images
     match /advisory_board_images/{allPaths=**} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
