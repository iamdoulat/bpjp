
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Profile Images:
    // Allow users to read and write their own profile images.
    // Public read can be useful if profile images are displayed publicly.
    match /profile-images/{userId}/{fileName} {
      allow read: if true; // Or restrict to authenticated users: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Campaign Images:
    // Allow authenticated users to upload campaign images.
    // Public read is typical for campaign images.
    match /campaign_images/{fileName} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    match /campaign_images/{campaignId}/{fileName} { // If using campaignId in path
      allow read: if true;
      allow write: if request.auth != null;
    }


    // Expense Attachments:
    // Allow authenticated users to upload (write) expense attachments.
    // Allow authenticated users to read their own or all expense attachments.
    // Adjust read access based on your app's requirements (e.g., only admins or specific users).
    match /expense_attachments/{fileName} {
      allow read: if request.auth != null; // Allow any authenticated user to read (e.g., for admin review)
      allow write: if request.auth != null; // Allow any authenticated user to write (e.g., admins or designated users creating expenses)
    }

    // Organization Setting Images (President, Secretary, Cover Images):
    // Allow authenticated users (presumably admins) to upload these.
    // Public read for display on About Us page.
    match /organization/{settingsDocId}/{imageType}.{extension} {
      allow read: if true;
      allow write: if request.auth != null; // Assuming admins are authenticated users who can access the settings page
    }
    match /organization/{settingsDocId}/president_image.{extension} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    match /organization/{settingsDocId}/secretary_image.{extension} {
      allow read: if true;
      allow write: if request.auth != null;
    }
     match /organization/{settingsDocId}/cover_image.{extension} {
      allow read: if true;
      allow write: if request.auth != null;
    }


    // Example: More restrictive rules for expense_attachments if needed
    // Only allow the user who created the expense (or an admin) to read/write.
    // This would require storing the uploader's UID with the expense document in Firestore
    // and then checking against that here.
    // match /expense_attachments/{expenseId}/{fileName} {
    //   allow read, write: if request.auth != null &&
    //                       (request.auth.uid == resource.metadata.ownerUid || get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin');
    // }
  }
}
