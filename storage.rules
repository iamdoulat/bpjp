
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if a user is an admin by reading their Firestore profile
    function isAdmin() {
      // Ensure there is an authenticated user with a UID
      return request.auth != null && request.auth.uid != null &&
             // Check if a userProfile document exists for this user
             exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
             // Get the userProfile document and check the 'role' field
             get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Allow public read for campaign images
    match /campaign_images/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can upload campaign images
    }

    // Allow public read for event attachments
    match /event_attachments/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can upload event attachments
    }

    // Allow public read for expense attachments, but only admins can write
    match /expense_attachments/{allPaths=**} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Allow public read for organization images (logo, president, etc.)
    match /organization/{allPaths=**} {
        allow read: if true;
        allow write: if isAdmin(); // Only admins can write
    }

    // Allow public read for advisory board images
     match /advisory_board_images/{allPaths=**} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Allow public read for election candidate images
    match /election_candidates/{allPaths=**} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Users can only write to their own profile images folder
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if true; // Profile images are public
      allow write: if request.auth != null && request.auth.uid == userId; // Only the user can upload their own photo
    }
    
  }
}
