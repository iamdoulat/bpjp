rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Profile Images:
    // Allow anyone to read (public profile pictures).
    // Allow authenticated users to write only to their own profile image path.
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

		// In your Firebase Storage Rules
		match /campaign_images/{allPaths=**} {
 		allow read: if true; // Or your specific read rule
  	allow write: if true; // Temporary 
    //allow write: if request.auth != null &&
                  //get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
		}

    // Event Attachments:
    // Allow anyone to read.
    // Allow write only by admins (assuming events are admin-managed).
    match /event_attachments/{allPaths=**} {
      allow read: if true;
  		allow write: if true; // Temporary 
    //allow write: if request.auth != null &&
                  //get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
		}

    // Expense Attachments:
    // Allow anyone to read.
    // Allow write only by admins (assuming expenses are created/managed by admins).
    match /expense_attachments/{allPaths=**} {
      allow read: if true;
  		allow write: if true; // Temporary 
    //allow write: if request.auth != null &&
                  //get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
		}

    // Organization Settings Images (e.g., president, secretary, cover photos):
    // Allow anyone to read.
    // Allow write only by admins.
    match /organization/{allPaths=**} {
      allow read: if true;
  		allow write: if true; // Temporary 
    //allow write: if request.auth != null &&
                  //get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
		}

    // Advisory Board Images:
    // Allow anyone to read.
    // Allow write only by admins.
    match /advisory_board_images/{allPaths=**} {
      allow read: if true;
  		allow write: if true; // Temporary 
    //allow write: if request.auth != null &&
                  //get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
		}
    
    match /election_candidates/{position}/{imageId} {
  	allow read; // Or more restrictive if needed
    allow write: if true; // Temporary 
  	//allow write: if request.auth != null && 
    //              get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
	}

    // Default Fallback Rule:
    // Deny all reads and writes to any other paths not explicitly matched above.
    // This is a security best practice. If you have other paths you need to access,
    // you'll need to add specific rules for them.
    //match /{allPaths=**} {
      //allow read, write: if false;
    //}
  }
}