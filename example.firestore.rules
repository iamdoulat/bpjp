
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      // Admins can read/write/delete any profile
      // Users can read their own profile and update specific fields
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null; // Any authenticated user can create their profile doc
      allow update: if request.auth != null && 
                      (request.auth.uid == userId || isAdmin()) &&
                      (isAdmin() || (
                        request.resource.data.keys().hasAll(['displayName', 'mobileNumber', 'photoURL', 'lastUpdated']) &&
                        (!request.resource.data.keys().hasAny(['role', 'status', 'walletBalance', 'email', 'joinedDate']))
                      ));
                      // Users can only update displayName, mobileNumber, photoURL, lastUpdated.
                      // Admins can update anything.
      allow delete: if isAdmin(); // Only admins can delete profiles
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Campaigns are public to read
      allow create, update, delete: if isAdmin();

      // Likes subcollection
      match /likes/{userId} {
        allow read: if true; // Anyone can read like counts
        allow create: if request.auth != null && request.auth.uid == userId; // User can like
        allow delete: if request.auth != null && request.auth.uid == userId; // User can unlike
      }

      // Supports subcollection
      match /supports/{userId} {
        allow read: if true; // Anyone can read support counts
        allow create: if request.auth != null && request.auth.uid == userId; // User can support
        allow delete: if request.auth != null && request.auth.uid == userId; // User can unsupport
      }
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      // Admins can read/write all transactions
      // Authenticated users can create their own transactions and read their own.
      allow read: if request.auth != null && (isAdmin() || request.resource.data.userId == request.auth.uid);
      allow list: if isAdmin(); // Only admins can list all transactions
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // Expenses
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null; // Authenticated users can read expenses
      allow create, update, delete: if isAdmin(); // Only admins can manage expenses
    }
    
    // Events
    match /events/{eventId} {
      allow read: if true; // Events are public to read
      
      // Admins can create, update, and delete events
      allow create, delete: if isAdmin();

      // Update rules:
      // Admins can update any field.
      // Authenticated users can update an event IF they are only incrementing participantCount
      // AND no other fields are being changed during that specific update operation.
      allow update: if isAdmin() || 
                      (request.auth != null && 
                       request.writeFields.hasOnly(['participantCount']) &&
                       request.resource.data.participantCount == resource.data.get('participantCount', 0) + 1);
                       // Using resource.data.get('participantCount', 0) to handle cases where the field might not exist yet (first registration).

      // Event Registrations subcollection
      match /registrations/{registrationId} {
        // Admins can read all registrations
        // Users can read their own registration
        allow read: if request.auth != null && (registrationId == request.auth.uid || isAdmin());
        allow list: if isAdmin(); // Only admins can list all registrations for an event
        // Authenticated users can create their own registration document
        allow create: if request.auth != null && registrationId == request.auth.uid;
        // Only admins can update or delete registrations
        allow update, delete: if isAdmin();
      }
    }

    // Site Content (e.g., Mission, Organization Settings)
    match /siteContent/{contentId} {
        allow read: if true; // Publicly readable
        allow write: if isAdmin(); // Only admins can modify
    }
  }
}
