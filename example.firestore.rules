
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null; // Allow any authenticated user to create their profile (e.g., on signup)
      // Allow update by self or admin. Ensure sensitive fields like 'role' or 'walletBalance' are protected if updated by self.
      // For simplicity, if user updates own, they can only update specific fields like displayName, mobileNumber, photoURL.
      allow update: if request.auth != null && (
                      (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'mobileNumber', 'photoURL', 'lastUpdated'])) ||
                      isAdmin()
                    );
      // Delete should generally be restricted, perhaps only by admin or through a specific secure process
      allow delete: if isAdmin();
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow get, list: if true; // Anyone can read campaigns
      allow create, delete: if isAdmin();
      // Allow updates by admin.
      // Allow specific updates for reactions by any authenticated user (likeCount, supportCount)
      allow update: if isAdmin() ||
                       (request.auth != null &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'supportCount']) &&
                        (request.resource.data.likeCount == resource.data.get('likeCount', 0) + 1 || request.resource.data.likeCount == resource.data.get('likeCount', 0) - 1 ||
                         request.resource.data.supportCount == resource.data.get('supportCount', 0) + 1 || request.resource.data.supportCount == resource.data.get('supportCount', 0) - 1)
                       );

      // Likes subcollection
      match /likes/{userId} {
        allow read: if true; // Anyone can read who liked (optional, could be restricted)
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can like/unlike for themselves
      }

      // Supports subcollection
      match /supports/{userId} {
        allow read: if true; // Anyone can read who supported (optional, could be restricted)
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can support/unsupport for themselves
      }
    }

    // Expenses
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null; // Authenticated users can view expenses list and details
      allow create, update, delete: if isAdmin(); // Only admins can manage expenses
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      // User can read their own transactions, Admin can read all.
      allow get, list: if request.auth != null && (isAdmin() || (resource.data.userId == request.auth.uid && request.auth.uid != null));
      // User can create their own transaction. userId in request data must match their auth uid.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only admins can update status or delete.
      allow update, delete: if isAdmin();
    }

    // Events
    match /events/{eventId} {
      allow get, list: if true; // Anyone can read events
      allow create, delete: if isAdmin();
      // Allow updates by admin.
      // Allow participantCount updates by any authenticated user (during registration transaction)
      allow update: if isAdmin() ||
                       (request.auth != null &&
                        request.writeFields.hasOnly(['participantCount']) &&
                        request.resource.data.participantCount == resource.data.get('participantCount', 0) + 1
                       );

      // Event Registrations subcollection
      match /registrations/{userId} {
        allow read: if request.auth != null && (request.auth.uid == userId || isAdmin()); // User can read their own, admin can read any
        allow list: if isAdmin(); // Only admins can list all registrations for an event
        // Authenticated user can register themselves. userId in path must match their auth.uid.
        allow create: if request.auth != null && request.auth.uid == userId;
        // Delete/update of registration could be allowed for user or admin
        allow delete, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
    }

    // Site Content (Mission, Organization Settings, etc.)
    match /siteContent/{documentId} {
      allow get, list: if true; // Anyone can read site content
      allow create, update, delete: if isAdmin(); // Only admins can manage site content
    }
  }
}
