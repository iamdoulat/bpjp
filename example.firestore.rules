
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/userProfiles/$(userId)) &&
             get(/databases/$(database)/documents/userProfiles/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow list: if request.auth != null; // Any authenticated user can list profiles (e.g., for Donors List)
      allow get: if request.auth != null; // Any authenticated user can get any profile (e.g., for Donors List, or admin viewing)
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid)); // User can update their own, admin can update any
      allow delete: if isAdmin(request.auth.uid); // Only admin can delete
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Campaigns are public
      allow create, update, delete: if isAdmin(request.auth.uid); // Only admins can manage campaigns

      // Reactions (Likes/Supports) subcollections
      match /likes/{userId} {
        allow read, list: if request.auth != null; // Any authenticated user can see likes (e.g. for counts) or admins can list
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can only like/unlike for themselves
      }
      match /supports/{userId} {
        allow read, list: if request.auth != null; // Any authenticated user can see supports or admins can list
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can only support/unsupport for themselves
      }
    }

    // Events
    match /events/{eventId} {
      allow get: if true; // Allow reading single event documents (e.g. for event detail page)
      allow list: if true; // Allow listing events (e.g. for upcoming events page)
      allow create, delete: if isAdmin(request.auth.uid); // Admins can create/delete events

      // Admins can update any field
      // Non-admins can update participantCount if it's an increment of 1 and only that field is changing.
      allow update: if isAdmin(request.auth.uid) ||
                       (
                         request.auth != null &&
                         request.writeFields.hasOnly(['participantCount']) && // Ensure only participantCount is in the data being written
                         request.resource.data.participantCount == resource.data.participantCount + 1 // Check it's an increment
                       );

      // Registrations subcollection for an event
      match /registrations/{userId} {
        allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid)); // User can read their own registration, admin can read any
        allow list: if isAdmin(request.auth.uid); // Admins can list all registrations for an event
        // Allow user to create their own registration if they are authenticated,
        // the registration is for themselves, and the event exists.
        allow create: if request.auth != null && request.auth.uid == userId &&
                         request.resource.data.userId == request.auth.uid &&
                         exists(/databases/$(database)/documents/events/$(eventId));
        allow delete: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid)); // User can delete their own registration, admin can delete any
      }
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid)); // User can read their own, admin can read any.
      allow list: if request.auth != null; // Any authenticated user can list transactions (for public donor lists, but filter on client)
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create their own transaction
      allow update, delete: if isAdmin(request.auth.uid); // Only admins can update status or delete
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null; // Authenticated users (especially admins) can read
      allow list: if request.auth != null; // Authenticated users (especially admins) can list
      allow create, update, delete: if isAdmin(request.auth.uid); // Only admins can manage expenses
    }

    // Site Content (Mission, Organization Settings)
    match /siteContent/{contentId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if isAdmin(request.auth.uid); // Only admins can manage site content
    }
  }
}

    