
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.uid != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles:
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile.
    // - Authenticated users can update their own displayName, mobileNumber, photoURL.
    // - Admins can read and write any user profile.
    match /userProfiles/{userId} {
      allow read: if isAdmin() || (request.auth.uid != null && request.auth.uid == userId);
      allow create: if request.auth.uid != null && request.auth.uid == userId;
      allow update: if isAdmin() || 
                       (request.auth.uid != null && request.auth.uid == userId &&
                        request.resource.data.keys().hasOnly(['displayName', 'mobileNumber', 'photoURL', 'lastUpdated', 'lastLoginDate', 'walletBalance'])); 
                        // Ensure users can only update specific fields. `walletBalance` update here is only for user-initiated actions if any, admin updates are separate.
      allow delete: if isAdmin(); // Only admins can delete profiles
    }

    // Campaigns:
    // - All users (authenticated or not) can read campaigns.
    // - Admins can create, update, delete campaigns.
    // - Authenticated users can update likeCount/supportCount (via transaction)
    match /campaigns/{campaignId} {
      allow read: if true; 
      allow create, update, delete: if isAdmin();

      // Likes and Supports subcollections
      match /likes/{userId} {
        allow read: if true;
        allow write: if request.auth.uid != null && request.auth.uid == userId; // User can like/unlike for themselves
      }
      match /supports/{userId} {
        allow read: if true;
        allow write: if request.auth.uid != null && request.auth.uid == userId; // User can support/unsupport for themselves
      }
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      // Read: Admins can read any. Users can read their own.
      allow read: if isAdmin() || 
                     (request.auth.uid != null && resource.data.userId == request.auth.uid);

      // Create: Users can create their own.
      // Ensure basic validation for create operations (e.g. amount is positive).
      allow create: if request.auth.uid != null && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.amount > 0 &&
                       request.resource.data.status in ['Pending', 'Succeeded', 'Failed', 'Refunded'];

      // Update/Delete: Only admins can update (e.g., status changes, marking as refunded) or delete.
      allow update, delete: if isAdmin();
    }

    // Expenses:
    // - Admins can create, read, update, delete expenses.
    // - Authenticated users can list/read expenses (for viewing history on /expenses/history).
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null; // Authenticated users can read/list
      allow create, update, delete: if isAdmin(); // Admins can manage
    }

    // Site Content (e.g., Mission, Organization Settings)
    // - All users can read.
    // - Admins can write.
    match /siteContent/{contentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Events
    match /events/{eventId} {
      allow read: if true; // All users can read event details
      allow create, delete: if isAdmin(); // Admins can create/delete events

      // Allow admins to update any field.
      // Allow authenticated users to update participantCount only if they are incrementing it by 1.
      allow update: if isAdmin() || 
                       (request.auth.uid != null &&
                        request.writeFields.hasOnly(['participantCount']) &&
                        request.resource.data.participantCount == resource.data.get('participantCount', 0) + 1);
                        
      // Registrations Subcollection
      match /registrations/{registrationId} {
        // Admins can read/list all registrations for an event.
        // Users can create their own registration (registrationId == userId).
        // Users can read their own registration.
        allow read, list: if isAdmin() || (request.auth.uid != null && registrationId == request.auth.uid);
        allow create: if request.auth.uid != null && 
                         registrationId == request.auth.uid &&
                         request.resource.data.userId == request.auth.uid; // Ensure userId in data matches
        allow update, delete: if isAdmin(); // Admins can manage registrations
      }
    }
  }
}

    