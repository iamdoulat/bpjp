
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow list: if request.auth != null; // Allow any authenticated user to list profiles (e.g., for donor lists)
      allow get: if request.auth != null; // Allow any authenticated user to get any profile (for display purposes)
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin()); // User can update their own, admin can update any
      allow delete: if isAdmin(); // Only admins can delete profiles
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Anyone can read campaign details
      allow list: if true; // Anyone can list campaigns
      allow create, update, delete: if isAdmin();

      // Reactions (Likes/Supports) subcollections
      match /likes/{userId} {
        allow read, list: if true; // Anyone can see who liked
        allow create, delete: if request.auth != null && request.auth.uid == userId; // Authenticated user can like/unlike
        // No update needed for simple like/unlike
      }
      match /supports/{userId} {
        allow read, list: if true; // Anyone can see who supported
        allow create, delete: if request.auth != null && request.auth.uid == userId; // Authenticated user can support/unsupport
      }
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create their own payment
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin()); // User can read their own, admin can read any
      allow list: if request.auth != null; // Any authenticated user can list for donor lists, admins for tracking
      allow update, delete: if isAdmin(); // Only admins can update status or delete
    }

    // Expenses
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null; // Any authenticated user can read/list expenses for history page
      allow create, update, delete: if isAdmin(); // Only admins can manage expenses
    }

    // Events
    match /events/{eventId} {
      allow read: if true; // Anyone can read event details
      allow list: if true; // Anyone can list events
      allow create, delete: if isAdmin(); // Admins manage event creation/deletion
      // Admin update rule for most fields
      // User update rule (for participantCount increment)
      allow update: if isAdmin() || 
                       (request.auth != null && 
                        request.writeFields.hasOnly(['participantCount']) &&
                        request.resource.data.participantCount == resource.data.participantCount + 1);

      // Registrations subcollection
      match /registrations/{registrationId} {
        allow read, list: if isAdmin(); // Admins can read/list all registrations
        allow create: if request.auth != null && request.auth.uid == registrationId &&
                         // Ensure event exists and user is creating their own registration
                         exists(/databases/$(database)/documents/events/$(eventId)) &&
                         // Ensure the user is not already registered (client-side check is primary, this is a safeguard)
                         !existsAfter(/databases/$(database)/documents/events/$(eventId)/registrations/$(registrationId));
        // No update/delete for users from client-side for simplicity, admins can manage via console or specific admin functions
        allow delete: if isAdmin();
      }
    }
    
    // Site Content (Mission, Organization Settings)
    match /siteContent/{contentId} {
      allow read: if true; // Publicly readable
      allow list: if true; // Allow listing for potential future use
      allow write: if isAdmin(); // Only admins can update site content
    }
  }
}
