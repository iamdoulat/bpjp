
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles:
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile (e.g., on first login completion).
    // - Authenticated users can update their own profile (displayName, mobileNumber, photoURL).
    // - Admins can read, list, create, update any user profile.
    // - Admins can delete user profiles (Firestore document only).
    match /userProfiles/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin(); // Only admins can list all profiles
      allow create: if request.auth != null && request.auth.uid == userId; // User creating their own profile
      allow update: if request.auth != null && (
                      (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'mobileNumber', 'photoURL', 'lastUpdated', 'lastLoginDate'])) ||
                      (isAdmin() && (request.resource.data.diff(resource.data).affectedKeys().hasAny(['displayName', 'mobileNumber', 'role', 'status', 'photoURL', 'lastUpdated', 'walletBalance'])))
                    );
      allow delete: if isAdmin(); // Only admins can delete profiles
    }

    // Campaigns:
    // - All users (even unauthenticated) can read/list campaigns.
    // - Admins can create, update, delete campaigns.
    // - Reactions (likes/supports) can be added/removed by authenticated users for their own reaction.
    match /campaigns/{campaignId} {
      allow read, list: true; // Publicly readable
      allow create, update, delete: if isAdmin();

      // Likes subcollection
      match /likes/{userId} {
        allow read: true; // Anyone can read who liked (for counts)
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can like/unlike
        allow list: if isAdmin(); // Admins can list all likes for a campaign
        allow update: if false; // No updates, only create/delete
      }

      // Supports subcollection
      match /supports/{userId} {
        allow read: true; // Anyone can read who supported (for counts)
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can support/unsupport
        allow list: if isAdmin(); // Admins can list all supports for a campaign
        allow update: if false; // No updates, only create/delete
      }
    }

    // Expenses:
    // - Authenticated users can list and read expenses.
    // - Admins can create, update, delete expenses.
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Payment Transactions:
    // - Authenticated users can create their own payment transactions.
    // - Authenticated users can read their own payment transactions.
    // - Admins can read, list, update, delete all payment transactions.
    match /paymentTransactions/{transactionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, list: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Events:
    // - All users (even unauthenticated) can read/list events.
    // - Admins can create, update, delete events.
    match /events/{eventId} {
      allow read, list: true; // Publicly readable
      allow create, delete: if isAdmin();
      // Allow update for participantCount increment by any authenticated user,
      // other updates by admin only.
      allow update: if request.auth != null && (
                      (request.writeFields.hasOnly(['participantCount']) &&
                       request.resource.data.participantCount == resource.data.get('participantCount', 0) + 1) ||
                      isAdmin()
                    );

      // Registrations subcollection
      match /registrations/{userId} {
        allow read, list: if isAdmin(); // Only admins can list all registrations for an event.
                                       // Individual users can check their own registration via a function if needed,
                                       // but direct read here is admin-only to prevent listing other users.
                                       // For client-side checks by user, a backend function call or a more specific rule is better.
                                       // However, client side "checkIfUserRegistered" reads this doc.
                                       // So allow user to read their own registration doc.
                                       // Allow create if user is registering themselves.
        allow create: if request.auth != null && request.auth.uid == userId;
        allow get: if request.auth != null && (request.auth.uid == userId || isAdmin()); // User can get their own, admin can get any.
        allow update, delete: if isAdmin(); // Only admins can modify/delete registrations.
      }
    }

    // Site Content (Mission, Organization Settings):
    // - All users (even unauthenticated) can read site content.
    // - Admins can create/update site content.
    match /siteContent/{contentId} {
      allow read: true;
      allow create, update, delete: if isAdmin();
    }
  }
}
