
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/userProfiles/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if request.auth != null; // Authenticated users can list/read profiles (for Donors List, etc.)
      allow get: if request.auth != null && request.auth.uid == userId; // User can get their own profile
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile on signup
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid)); // User can update their own, admin can update any
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admin can delete
    }
    // Allow admins to list all user profiles
    match /userProfiles {
      allow list: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin-only write access
    }
    // Allow admins to list all campaigns for management
     match /campaigns {
      allow list: if true; // Publicly listable
    }

    // Campaign Reactions (Likes/Supports)
    match /campaigns/{campaignId}/likes/{userId} {
      allow read: if true;
      allow create, delete: if request.auth != null && request.auth.uid == userId; // User can like/unlike their own
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Admin can list for moderation/analytics
    }
    match /campaigns/{campaignId}/supports/{userId} {
      allow read: if true;
      allow create, delete: if request.auth != null && request.auth.uid == userId; // User can support/unsupport their own
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Admin can list for moderation/analytics
    }


    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin(request.auth.uid)); // User can read their own, admin can read any
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId; // User can create their own transactions
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin-only update/delete
    }
    // Allow admins to list all transactions. Authenticated users can list for "Donors List" page.
    match /paymentTransactions {
       allow list: if request.auth != null;
    }


    // Events
    match /events/{eventId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin-only write access
    }
     match /events {
      allow list: if true; // Publicly listable
    }
    // Placeholder for event participants subcollection if implemented
    // match /events/{eventId}/participants/{userId} {
    //   allow read: if true;
    //   allow create: if request.auth != null && request.auth.uid == userId;
    //   allow delete: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
    // }


    // Expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null; // Authenticated users can read (for public history page)
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin-only write access
    }
     match /expenses {
      allow list: if request.auth != null; // Authenticated users can list (for public history page)
    }

    // Site Content (Mission, Organization Settings)
    match /siteContent/{contentId} { // e.g., contentId = 'ourMissionContent' or 'organizationDetails'
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin-only write access
    }
     match /siteContent {
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Admins can list
    }
  }
}

    