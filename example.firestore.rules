
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if true; // Publicly readable or based on your app's needs
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth != null && request.auth.uid == userId; // User can update their own profile
      allow delete: if isAdmin(); // Only admins can delete profiles (or perhaps user themselves, adjust as needed)
      // Admin can manage any user profile
      allow write: if isAdmin(); // This covers create, update, delete for admins broadly
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Campaigns are publicly viewable
      allow create, update, delete: if isAdmin(); // Only admins can manage campaigns

      // Reactions subcollections (likes, supports)
      match /{reactionCollection}/{userId} {
        // reactionCollection would be 'likes' or 'supports'
        allow read: if true; // Allow reading reaction counts
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can add/remove their own reaction
        // No update, reactions are usually create/delete
      }
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow read, list: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid); // Admin or owner can read
      allow create: if request.auth != null; // Any authenticated user can create (initiate a payment)
      allow update: if isAdmin(); // Only admins can update status (e.g., from Pending to Succeeded)
      allow delete: if isAdmin(); // Only admins can delete transactions
    }

    // Expenses
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null; // Any authenticated user can read expenses
      allow create, update, delete: if isAdmin(); // Only admins can manage expenses
    }

    // Events
    match /events/{eventId} {
      allow get: if true; // Publicly viewable
      allow list: if true; // Publicly listable
      allow create, delete: if isAdmin();

      // Admin update rule (full permission)
      allow update: if isAdmin();

      // Non-admin update rule (specifically for participantCount increment during registration)
      allow update: if request.auth != null
                    && request.writeFields.hasOnly(['participantCount'])
                    && request.resource.data.participantCount == (resource.data.get('participantCount', 0) + 1);


      // Registrations subcollection for an event
      match /registrations/{registrationId} {
        allow list, read: if isAdmin(); // Admins can see all registrations for an event
        allow create: if request.auth != null && request.auth.uid == registrationId; // User can create their own registration
        allow get: if request.auth != null && request.auth.uid == registrationId; // User can get their own registration
        allow delete: if isAdmin(); // Admins can delete registrations
      }
    }
    
    // Site Content (Mission, Organization Settings etc.)
    match /siteContent/{contentId} {
      allow read: if true; // Publicly readable
      allow write: if isAdmin(); // Only admins can update site content
    }
  }
}
