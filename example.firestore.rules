
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/userProfiles/$(userId)) &&
             get(/databases/$(database)/documents/userProfiles/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      // Admins can read, update, and delete any user profile
      allow read, update, delete: if isAdmin(request.auth.uid);
      // Authenticated users can create their own profile document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Authenticated users can get their own profile
      allow get: if request.auth != null && request.auth.uid == userId;
      // Authenticated users can update their own profile (displayName, mobileNumber, photoURL, lastUpdated, lastLoginDate)
      allow update: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['displayName', 'mobileNumber', 'photoURL', 'lastUpdated', 'lastLoginDate', 'uid', 'email', 'role', 'status', 'joinedDate', 'walletBalance']);
      // Allow listing of profiles for authenticated users (e.g., for donors list)
      allow list: if request.auth != null;
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Campaigns are publicly readable
      // Admins can create, update, and delete campaigns
      allow create, update, delete: if isAdmin(request.auth.uid);

      // Reactions (likes/supports) subcollections
      match /likes/{userId} {
        allow read: if true;
        // Authenticated users can like/unlike (create/delete their own reaction)
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        // Admins can list all likes for a campaign
        allow list: if isAdmin(request.auth.uid);
      }
      match /supports/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow list: if isAdmin(request.auth.uid);
      }
    }

    // Events
    match /events/{eventId} {
      allow read: if true; // Events are publicly readable
      allow create, delete: if isAdmin(request.auth.uid); // Admins can create/delete events

      // Admins can update any field
      // Non-admins can update only participantCount by incrementing it by 1
      // and cannot change any other field in the same write operation.
      allow update: if isAdmin(request.auth.uid) ||
                       (request.auth != null &&
                        request.resource.data.participantCount == resource.data.participantCount + 1 &&
                        request.writeFields.hasOnly(['participantCount']));


      // Event Registrations
      match /registrations/{registrationId} {
        allow read: if request.auth != null && (request.auth.uid == registrationId || isAdmin(request.auth.uid));
        allow list: if isAdmin(request.auth.uid);
        allow create: if request.auth != null && request.auth.uid == registrationId;
        // No direct update/delete by users for registrations from client to keep it simple, admins can manage.
        allow update, delete: if isAdmin(request.auth.uid);
      }
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read, list: if isAdmin(request.auth.uid); // Only admins can view expense history
      allow create, update, delete: if isAdmin(request.auth.uid); // Only admins can manage expenses
    }

    // Site Content (e.g., Mission, Organization Settings)
    match /siteContent/{contentId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if isAdmin(request.auth.uid); // Admins manage site content
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      // Admins can read, update, delete any transaction
      allow read, update, delete: if isAdmin(request.auth.uid);
      // Users can create their own payment transactions
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Users can read their own payment transactions
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow listing of transactions for authenticated users (e.g., for donors list or admin view if not admin rule above)
      allow list: if request.auth != null;
    }
  }
}
