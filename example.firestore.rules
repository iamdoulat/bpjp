
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow list: if request.auth != null; // Allow authenticated users to list (e.g., for Donors List)
      allow get: if request.auth != null; // Allow any authenticated user to get any profile (e.g. for avatar in donor list)
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth.uid == userId || isAdmin(); // User can update their own, admin can update any
      allow delete: if isAdmin(); // Only admins can delete user profiles
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Campaigns are public
      allow create, update, delete: if isAdmin(); // Only admins can manage campaigns

      // Likes subcollection
      match /likes/{userId} {
        allow read, list: if isAdmin(); // Admins can read/list likes
        allow create, delete: if request.auth.uid == userId; // Users can like/unlike
      }
      // Supports subcollection
      match /supports/{userId} {
        allow read, list: if isAdmin(); // Admins can read/list supports
        allow create, delete: if request.auth.uid == userId; // Users can support/unsupport
      }
    }

    // Expenses
    match /expenses/{expenseId} {
      allow get, list: if request.auth != null; // Authenticated users can read/list expenses
      allow create, update, delete: if isAdmin(); // Only admins can manage expenses
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow create: if request.auth.uid == request.resource.data.userId; // User can create their own payment transaction
      allow read: if request.auth.uid == resource.data.userId || isAdmin(); // User can read their own, admin can read any
      allow list: if request.auth != null; // Authenticated users can list all transactions (for Donors List)
      allow update, delete: if isAdmin(); // Only admins can update/delete payment transactions
    }

    // Events
    match /events/{eventId} {
      allow read: if true; // Events are public
      allow create: if isAdmin(); // Only admins can create events
      allow update: if isAdmin() || (request.auth != null && request.writeFields.hasOnly(['participantCount']) && request.resource.data.participantCount == resource.data.participantCount + 1); // Admins can update all fields. Authenticated users can only increment participantCount.
      allow delete: if isAdmin(); // Only admins can delete events

      // Registrations subcollection for events
      match /registrations/{registrationId} {
        allow create: if request.auth.uid == registrationId; // User can register themselves
        allow read, list: if isAdmin(); // Admins can read/list all registrations
        allow delete: if isAdmin() || request.auth.uid == registrationId; // Admin or the user themselves can delete a registration
      }
    }

    // Site Content (Mission, Organization Settings)
    match /siteContent/{contentId} {
      allow read: if true; // Publicly readable (e.g., mission statement, about us info)
      allow write: if isAdmin(); // Only admins can update site content
    }
  }
}
