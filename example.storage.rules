rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Profile Images
    match /profile-images/{userId}/{profileImage=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Campaign Images: Allow public read. Allow write only by admins.
    match /campaign_images/{allPaths=**} {
      allow read; // Publicly readable
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Event Attachments: Allow public read. Allow write only by admins.
    match /event_attachments/{allPaths=**} {
      allow read; // Publicly readable
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Expense Attachments: Only allow read/write by the user who created the expense (or admins).
    // This rule assumes expense documents in Firestore have a 'createdBy' field with the userId.
    // And that admins can manage all expenses.
    match /expense_attachments/{fileName} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.metadata.ownerUid || 
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin');
      allow write: if request.auth != null &&
                      (request.auth.uid == request.resource.metadata.ownerUid || // Check on new file upload
                       get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin'); 
                      // For updates/deletes, you might check existing resource.metadata.ownerUid if available
                      // Or simply rely on Firestore rules to control who can trigger the update/delete flow.
    }

     // Organization Settings Images (e.g., president, secretary, cover photos):
    // Allow public read. Allow write only by admins.
    match /organization/{settingsDocId}/{imageName} {
      allow read; // Publicly readable
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Advisory Board Images - Read for all, write/delete for admins only
    match /advisory_board_images/{memberImage=**} {
      allow read;
      allow write, delete: if request.auth != null &&
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Fallback - allow public read on all unspecified paths
    match /{allPaths=**} {
      allow read: if true;
    }
  }
}
