
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Campaign Images
    // Path: campaign_images/{campaignImageId}
    match /campaign_images/{campaignImage=**} {
      allow read; // Allow public read for campaign images
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Event Attachments
    // Path: event_attachments/{eventAttachmentId}
    match /event_attachments/{eventAttachment=**} {
      allow read; // Allow public read for event attachments
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Expense Attachments
    // Path: expense_attachments/{expenseAttachmentId}
    match /expense_attachments/{expenseAttachment=**} {
      // Allow read only by authenticated users (e.g., admin viewing an expense, or user viewing their own - though not implemented for user view yet)
      allow read: if request.auth != null;
      // Allow write by any authenticated user (e.g., user creating an expense for themselves, or admin creating an expense)
      // If only admins should create expenses, this should be restricted to admin role.
      // The current expenseService.addExpense uses the logged-in user's ID.
      allow write: if request.auth != null;
    }

    // Organization Settings Images (President, Secretary, Cover)
    // Path: organization/{settingsDocId}/{imageType}.{extension}
    match /organization/{documentId}/{fileName} {
      allow read; // Allow public read for organization images (e.g., for About Us page)
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profile Images
    // Path: profile-images/{userId}/{profileImageName}
    match /profile-images/{userId}/{profileImage=**} {
      allow read; // Allow public read for profile images
      allow write: if request.auth != null && request.auth.uid == userId; // User can only write to their own profile image path
    }

    // Default deny all other paths if not explicitly matched above.
    // This is implicit if no other rules match. For clarity, you can add:
    // match /{allPaths=**} {
    //   allow read, write: if false;
    // }
  }
}
