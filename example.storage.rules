rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // General public read access for images - adjust if needed
    match /{allPaths=**} {
      allow read;
    }

    // User Profile Pictures
    // Allow users to upload/update/delete their own profile picture.
    match /profile-images/{userId}/{fileName} {
      allow read; // Allow public read for profile pictures
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Campaign Images
    // Allow authenticated admins to upload/update/delete campaign images.
    match /campaign_images/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Event Attachments
    // Allow authenticated admins to upload/update/delete event attachments.
    match /event_attachments/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Expense Attachments
    // Allow authenticated users to upload their own expense attachments.
    // Admins might need broader delete access if they manage others' expenses.
    match /expense_attachments/{fileName} {
      allow read; // Or restrict if sensitive
      allow write: if request.auth != null; // Allow any authenticated user to upload
      // More specific delete rule if only admins or owners can delete:
      // allow delete: if request.auth != null && 
      //                 (get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin' ||
      //                  resource.metadata.uid == request.auth.uid); // Example: metadata.uid for owner
      // For now, simpler:
      allow delete: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Organization Settings Images (President, Secretary, Cover)
    // Allow authenticated admins to upload/update/delete these images.
    match /organization/{settingsDocId}/{imageType}.{extension} {
      allow read;
      allow write: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
