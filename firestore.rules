
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/userProfiles/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if request.auth != null; // Authenticated users can read any profile
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Admin can list all profiles
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid); // User can update their own, admin can update any
      allow delete: if isAdmin(request.auth.uid); // Only admin can delete
    }

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Publicly readable
      allow list: if true; // Publicly listable
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only CUD

      // Reactions (Likes/Supports) subcollection for Campaigns
      match /likes/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow list: if request.auth != null && isAdmin(request.auth.uid);
      }
      match /supports/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow list: if request.auth != null && isAdmin(request.auth.uid);
      }
    }

    // Events
    match /events/{eventId} {
      allow read: if true;
      allow list: if true;
      allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if request.auth != null &&
                       (isAdmin(request.auth.uid) ||
                        (request.resource.data.participantCount == resource.data.participantCount + 1 && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participantCount'])));

      // Event Registrations subcollection
      match /registrations/{registrationId} {
        allow read: if request.auth != null && (request.auth.uid == registrationId || isAdmin(request.auth.uid));
        allow create: if request.auth != null && request.auth.uid == registrationId;
        allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
        allow list: if request.auth != null && isAdmin(request.auth.uid);
      }
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null && isAdmin(request.auth.uid); // Only Admins can read specific expenses
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Only admins can list all expenses.
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Site Content (Mission, Organization Settings etc.)
    match /siteContent/{contentDocId} { // Changed {contentId} to {contentDocId} to avoid conflict with subcollection
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);

      // Advisory Board Members subcollection (nested under organizationDetails)
      match /advisoryBoardMembers/{memberId} {
        allow read, list: if true;
        allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
      }
    }

    // Election Candidates
    match /electionCandidates/{candidateId} {
      allow read: if true; // Publicly readable
      allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
      // Allow admin to update any field, authenticated users can only update voteCount
      allow update: if request.auth != null &&
                       (isAdmin(request.auth.uid) ||
                        (request.resource.data.voteCount == resource.data.voteCount + 1 && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['voteCount'])));
    }

    // Election Votes
    match /electionVotes/{voteId} { // voteId is typically userId here
      allow read, write: if request.auth != null && request.auth.uid == voteId; // User can read/write their own vote
      // Admins can list votes (needed for queries like finding all votes for a candidate)
      // and get individual vote documents if needed.
      allow list, get: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Election Control Settings
    match /electionControl/{docId} {
      allow read: if true; // Publicly readable
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin(request.auth.uid));
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Only Admin can list all transactions
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
