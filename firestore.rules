rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/userProfiles/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if request.auth != null; // Authenticated users can read any profile (for Donors List, etc.)
      allow list: if request.auth != null; // Authenticated users can list profiles (for Donors List)
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid); // User can update their own, admin can update any
      allow delete: if isAdmin(request.auth.uid); // Only admin can delete
    }
    
    match /databases/{database}/documents {
  // ... other rules
  match /userProfiles/{userId} {
    allow read: if request.auth != null && request.auth.uid == userId; // User can read their own profile
    // ... other rules for userProfiles ...
  }
}
    

    // Campaigns
    match /campaigns/{campaignId} {
      allow read: if true; // Publicly readable
      allow list: if true; // Publicly listable
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only CUD

      // Reactions (Likes/Supports) subcollection for Campaigns
      match /likes/{userId} {
        allow read: if true; // Publicly readable counts (usually aggregated on campaign doc)
        allow create, delete: if request.auth != null && request.auth.uid == userId; // User can like/unlike their own
        allow list: if request.auth != null && isAdmin(request.auth.uid); // Admin can list likes for moderation/analytics
      }
      match /supports/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow list: if request.auth != null && isAdmin(request.auth.uid);
      }
    }

    // Events
    match /events/{eventId} {
      allow read: if true; // Publicly readable
      allow list: if true; // Publicly listable
      allow create, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only create/delete
      // Admin can update any field. Authenticated users can update only if incrementing participantCount by 1.
      allow update: if request.auth != null && 
                       (isAdmin(request.auth.uid) || 
                        (request.resource.data.participantCount == resource.data.participantCount + 1 && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participantCount'])));


      // Event Registrations subcollection
      match /registrations/{registrationId} { // registrationId will typically be userId
        allow read: if request.auth != null && (request.auth.uid == registrationId || isAdmin(request.auth.uid)); // User can read their own, admin can read any
        allow create: if request.auth != null && request.auth.uid == registrationId; // User can create their own registration
        allow update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin can manage registrations
        allow list: if request.auth != null && isAdmin(request.auth.uid); // Admin can list all registrations for an event
      }
    }
    
    // Expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null; // Authenticated users (especially admins) can read expenses.
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Only admins can list all expenses.
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only CUD.
    }

    // Site Content (Mission, Organization Settings etc.)
    match /siteContent/{contentId} {
      allow read: if true; // Publicly readable (e.g., for 'Our Mission', 'About Us' pages)
      allow list: if true; 
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only CUD
    }
    
  	match /siteContent/organizationDetails/advisoryBoardMembers/{memberId} {
    	allow read, list: if true; // Or more specific if needed, e.g., if request.auth != null;
     	allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only CUD
  	}

		match /electionCandidates/{candidateId} {
  	allow read: if true; // Or if request.auth != null; for authenticated read
  	allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only CUD
}

    // Payment Transactions
    match /paymentTransactions/{transactionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId; // User can create their own transactions
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin(request.auth.uid)); // User can read their own, admin can read any
      allow list: if request.auth != null; // Authenticated users can list all transactions (for Donors List page, admin payment tracking) - review for privacy if needed for non-admins.
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid); // Admin only update/delete
    }
  }
}